---
const {
  title,
  description,
  image,
  type = "website",
  publishedAt,
  tags,
} = Astro.props.frontmatter || Astro.props;
import { ViewTransitions } from "astro:transitions";
import Footer from "../components/Footer.astro";

// SEO defaults
const defaultTitle = "Dani Bengl - Full-Stack Developer";
const defaultDescription =
  "Full-stack software developer specializing in Ruby on Rails, web applications, and modern development practices. Portfolio, blog, and projects.";
const siteUrl = "https://cuddlybunion341.github.io";
const currentUrl = new URL(Astro.url.pathname, siteUrl).href;
const pageTitle = title ? `${title} | ${defaultTitle}` : defaultTitle;
const pageDescription = description || defaultDescription;
const pageImage = image
  ? new URL(image, siteUrl).href
  : `${siteUrl}/og-image.png`;

// Structured data for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": type === "article" ? "BlogPosting" : "WebPage",
  headline: title || defaultTitle,
  description: pageDescription,
  url: currentUrl,
  author: {
    "@type": "Person",
    name: "Dani Bengl",
    url: siteUrl,
    sameAs: [
      "https://github.com/CuddlyBunion341",
      "https://www.linkedin.com/in/daniel-bengl-aa5225221/",
      "https://www.codewars.com/users/CuddlyBunion341",
    ],
  },
  ...(type === "article" &&
    publishedAt && {
      datePublished: publishedAt.toISOString(),
      dateModified: publishedAt.toISOString(),
    }),
  ...(tags && {
    keywords: tags.join(", "),
  }),
};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    <!-- Primary Meta Tags -->
    <title>{pageTitle}</title>
    <meta name="title" content={pageTitle} />
    <meta name="description" content={pageDescription} />
    <meta name="author" content="Dani Bengl" />
    <link rel="canonical" href={currentUrl} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={currentUrl} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:image" content={pageImage} />
    <meta property="og:site_name" content="CB341.DEV" />
    <meta property="og:locale" content="en_US" />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={currentUrl} />
    <meta property="twitter:title" content={pageTitle} />
    <meta property="twitter:description" content={pageDescription} />
    <meta property="twitter:image" content={pageImage} />
    <meta property="twitter:creator" content="@cuddlybunion341" />

    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="theme-color" content="#e74c3c" />

    <!-- RSS Feed -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title="CB341.DEV RSS Feed"
      href="/rss.xml"
    />

    <!-- Structured Data -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />

    <ViewTransitions />
    <style>
      /* Essential reset and base styles */
      * {
        box-sizing: border-box;
      }

      body {
        font-family: Georgia, "Times New Roman", serif;
        line-height: 1.6;
        color: #222;
        background: #fff;
        font-size: 1.125rem;
        margin: 0 auto;
        max-width: 45rem;
        padding: 1rem;
      }

      /* Skip navigation for accessibility - KEEP */
      .skip-nav {
        position: absolute;
        top: -2.5rem;
        left: 0.375rem;
        background: #e74c3c;
        color: white;
        padding: 0.5rem;
        text-decoration: none;
        border-radius: 0 0 0.25rem 0.25rem;
        z-index: 1000;
      }

      .skip-nav:focus {
        top: 0.375rem;
      }

      /* Focus styles for accessibility - KEEP */
      *:focus {
        outline: 2px solid #e74c3c;
        outline-offset: 2px;
      }

      /* Basic styling */
      a {
        color: #e74c3c;
        text-decoration: none;
      }

      a:hover,
      a:focus {
        text-decoration: underline;
      }

      header {
        text-align: center;
      }

      header h1 a {
        color: inherit;
      }

      header h1 a:hover {
        color: #e74c3c;
      }

      /* Navigation */
      nav ul {
        list-style: none;
        padding: 0;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
      }

      nav ul li {
        margin: 0 1rem;
      }

      nav ul li a {
        color: #666;
        font-weight: 500;
        position: relative;
      }

      nav ul li a:hover,
      nav ul li a:focus {
        color: #e74c3c;
      }

      nav ul li a[aria-current="page"] {
        color: #e74c3c;
        font-weight: 600;
      }

      nav ul li a[aria-current="page"]::after {
        content: "";
        position: absolute;
        bottom: -0.25rem;
        left: 0;
        right: 0;
        height: 2px;
        background: #e74c3c;
      }

      .social-nav ul li {
        margin: 0 0.75rem;
      }

      .social-nav ul li a {
        color: #999;
        font-size: 0.9rem;
      }

      .social-nav ul li a:hover,
      .social-nav ul li a:focus {
        color: #e74c3c;
      }

      /* Components that are actually used */
      .hero {
        display: grid;
        grid-template-columns: 2fr 1fr;
        align-items: center;
      }

      .button {
        display: inline-block;
        background: #000;
        color: #fff;
        padding: 0.8rem 1.5rem;
        text-decoration: none;
        font-weight: 500;
        font-size: 0.9rem;
        border-radius: 0.25rem;
        border: 2px solid #000;
      }

      .button:hover,
      .button:focus {
        background: #e74c3c;
        border-color: #e74c3c;
        text-decoration: none;
      }

      .meta {
        color: #999;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .tags {
        display: flex;
        flex-wrap: wrap;
        list-style: none;
        padding: 0;
        gap: 0.5rem;
      }

      .tag {
        background: #f8f8f8;
        color: #666;
        padding: 0.2rem 0.6rem;
        text-decoration: none;
        font-size: 0.8rem;
        border-radius: 0.1875rem;
      }

      .tag:hover,
      .tag:focus {
        background: #e74c3c;
        color: #fff;
      }

      .tag.active {
        background: #e74c3c;
        color: #fff;
        font-weight: 500;
      }

      .project-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(20rem, 1fr));
        gap: 2rem;
      }

      .project-grid article {
        border: 1px solid #ddd;
        padding: 2rem;
        border-radius: 0.5rem;
        background: #fafafa;
      }

      .skills-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(9.375rem, 1fr));
        gap: 1rem;
      }

      .skill-item {
        text-align: center;
        padding: 0.8rem;
        background: #f8f8f8;
        border-radius: 0.25rem;
      }

      .skill-item h4 {
        font-size: 0.9rem;
        margin: 0;
        color: #333;
        font-weight: 500;
      }

      .nav-links {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 0;
        border-top: 1px solid #eee;
        font-size: 0.9rem;
      }

      .nav-links a {
        color: #666;
        text-decoration: none;
        font-weight: 500;
      }

      .nav-links a:hover {
        color: #e74c3c;
      }

      .actions {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
      }

      /* Basic responsive design */
      @media (max-width: 48rem) {
        .hero {
          grid-template-columns: 1fr;
          text-align: center;
        }

        .skills-grid {
          grid-template-columns: repeat(auto-fit, minmax(7.5rem, 1fr));
        }

        .project-grid {
          grid-template-columns: 1fr;
        }

        .nav-links {
          flex-direction: column;
          text-align: center;
          gap: 1rem;
        }

        nav ul li {
          margin: 0 0.5rem;
        }

        .actions {
          flex-direction: column;
          align-items: center;
        }

        .button {
          width: 12.5rem;
          text-align: center;
        }
      }

      @media (max-width: 37.5rem) {
        .skills-grid {
          grid-template-columns: 1fr 1fr;
        }
      }

      /* High contrast mode support - KEEP for accessibility */
      @media (prefers-contrast: high) {
        .tag {
          border: 1px solid #666;
        }

        .button {
          border: 2px solid currentColor;
        }
      }

      /* Reduced motion support - KEEP for accessibility */
      @media (prefers-reduced-motion: reduce) {
        *,
        *::before,
        *::after {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
      }
    </style>

    <!-- Global styles for markdown content -->
    <style is:global>
      img {
        max-width: 100%;
        height: auto;
      }
    </style>
  </head>
  <body>
    <a href="#main-content" class="skip-nav">Skip to main content</a>

    <header role="banner">
      <h1><a href="/" aria-label="CB341.DEV - Home">CB341.DEV</a></h1>
      <nav role="navigation" aria-label="Main navigation">
        <ul>
          <li>
            <a
              href="/"
              aria-current={Astro.url.pathname === "/" ? "page" : undefined}
              >Home</a
            >
          </li>
          <li>
            <a
              href="/about"
              aria-current={Astro.url.pathname === "/about"
                ? "page"
                : undefined}>About</a
            >
          </li>
          <li>
            <a
              href="/uses"
              aria-current={Astro.url.pathname === "/uses" ? "page" : undefined}
              >Uses</a
            >
          </li>
          <li>
            <a
              href="/til"
              aria-current={Astro.url.pathname === "/til" ? "page" : undefined}
              >TIL</a
            >
          </li>
          <li>
            <a
              href="/blog"
              aria-current={Astro.url.pathname.startsWith("/blog")
                ? "page"
                : undefined}>Blog</a
            >
          </li>
          <li>
            <a
              href="/projects"
              aria-current={Astro.url.pathname.startsWith("/projects")
                ? "page"
                : undefined}>Projects</a
            >
          </li>
        </ul>
      </nav>
      <nav class="social-nav" role="navigation" aria-label="Social media links">
        <ul>
          <li>
            <a
              href="https://www.codewars.com/users/CuddlyBunion341"
              target="_blank"
              rel="noopener noreferrer"
              aria-label="Codewars profile (opens in new tab)">Codewars</a
            >
          </li>
          <li>
            <a
              href="https://www.linkedin.com/in/daniel-bengl-aa5225221/"
              target="_blank"
              rel="noopener noreferrer"
              aria-label="LinkedIn profile (opens in new tab)">LinkedIn</a
            >
          </li>
          <li>
            <a
              href="https://github.com/CuddlyBunion341"
              target="_blank"
              rel="noopener noreferrer"
              aria-label="GitHub profile (opens in new tab)">GitHub</a
            >
          </li>
        </ul>
      </nav>
    </header>

    <main id="main-content" role="main">
      <slot />
    </main>

    <Footer />
    <slot name="after-main" />

    <script>
      // Add copy buttons to code blocks
      function addCopyButtons() {
        const codeBlocks = document.querySelectorAll("pre");

        codeBlocks.forEach((codeBlock) => {
          // Skip if already processed
          if (codeBlock.querySelector(".copy-button")) {
            return;
          }

          // Create copy button
          const copyButton = document.createElement("button");
          copyButton.textContent = "Copy";
          copyButton.setAttribute("aria-label", "Copy code to clipboard");
          copyButton.style.cssText = `
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.2s ease;
            z-index: 10;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
          `;

          // Make code block relative positioned
          codeBlock.style.position = "relative";
          codeBlock.appendChild(copyButton);

          // Show button on hover
          codeBlock.addEventListener("mouseenter", () => {
            copyButton.style.opacity = "1";
          });
          codeBlock.addEventListener("mouseleave", () => {
            copyButton.style.opacity = "0";
          });

          // Add click handler
          copyButton.addEventListener("click", async () => {
            try {
              const code = codeBlock.querySelector("code");
              const text = code?.textContent || codeBlock.textContent || "";

              await navigator.clipboard.writeText(text);

              // Visual feedback
              copyButton.textContent = "Copied!";
              copyButton.style.background = "#28a745";
              copyButton.style.opacity = "1";

              setTimeout(() => {
                copyButton.textContent = "Copy";
                copyButton.style.background = "rgba(0, 0, 0, 0.7)";
              }, 2000);
            } catch (err) {
              console.error("Failed to copy code:", err);
              copyButton.textContent = "Error";
              setTimeout(() => {
                copyButton.textContent = "Copy";
              }, 2000);
            }
          });
        });
      }

      // Run on page load
      document.addEventListener("DOMContentLoaded", addCopyButtons);

      // Run after view transitions (for Astro's ViewTransitions)
      document.addEventListener("astro:page-load", addCopyButtons);
    </script>
  </body>
</html>
